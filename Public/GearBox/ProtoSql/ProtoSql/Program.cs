using System;
using System.IO;
using System.Text;

using NDesk.Options;
using Google.ProtocolBuffers.DescriptorProtos;

class Program
{
  static public string DataAssemblyPath { get; private set; }
  static public string DataDescriptorPath { get; private set; }
  static public string OutputPath { get; private set; }
  static public string NotePath { get; private set; }

  static int Main(string[] args)
  {
    OptionSet os = new OptionSet();
    os.Add("dap|data_assembly_path=", v => DataAssemblyPath = v)
      .Add("ddp|data_descriptor_path=", v => DataDescriptorPath = v)
      .Add("o|output=", v => OutputPath = v)
      .Add("np|note_path=", v => NotePath = v)
      .Add("h|help", v => ShowHelp(os));

    os.Parse(args);

    if (show_help_)
      return 0;

    if (DataAssemblyPath == null || DataDescriptorPath == null)
    {
      ShowHelp(os);
      return -1;
    }

    try
    {
      AssemblyLoader al = new AssemblyLoader(DataAssemblyPath);
      ////////////////////////////////////////////////////////////////////////////
      //生成CreateDataTables.sql文件
      ////////////////////////////////////////////////////////////////////////////
      // 注释信息
      StringBuilder sb = StartGenerating(al);
      // 选择数据库
      sb.Append('\n');
      sb.Append("use dsnode;");
      sb.Append('\n');
      // 写入数据库版本 
      sb.AppendFormat("call SetDSNodeVersion('{0}');", al.FileVersion);
      sb.Append('\n');
      // 生成建表语句
      using (FileStream fs = File.OpenRead(DataDescriptorPath))
      {
        FileDescriptorSet fds = FileDescriptorSet.ParseFrom(fs);
        foreach (FileDescriptorProto fdp in fds.FileList)
        {
          foreach (DescriptorProto dp in fdp.MessageTypeList)
          {
            if (!dp.Name.StartsWith("DS_")) continue;
            SqlGenerator.Generate(new Analyzer(al, dp.Name), sb);
          }
        }
      }
      if (null == OutputPath)
        OutputPath = "CreateDataTables.sql";
      File.WriteAllText(OutputPath, sb.ToString(), Encoding.UTF8);
      ////////////////////////////////////////////////////////////////////////////
      //生成ClearData.sql文件
      ////////////////////////////////////////////////////////////////////////////
      StringBuilder sbClear = StartGenerating(al);
      sbClear.Append("use dsnode;\n\n");
      using (FileStream fs = File.OpenRead(DataDescriptorPath))
      {
        FileDescriptorSet fds = FileDescriptorSet.ParseFrom(fs);
        foreach (FileDescriptorProto fdp in fds.FileList)
        {
          foreach (DescriptorProto dp in fdp.MessageTypeList)
          {
            if (!dp.Name.StartsWith("DS_")) continue;
            SqlGenerator.GenerateClearSql(new Analyzer(al, dp.Name), sbClear);
          }
        }
      }
      string clearDataFile = "ClearData.sql";     //输出的文件名
      File.WriteAllText(clearDataFile, sbClear.ToString(), Encoding.UTF8);
      return 0;
    }
    catch (Exception e)
    {
      Console.WriteLine("Error:{0} \nStacktrace:{1}", e.Message, e.StackTrace);
      Console.ReadLine();
      return -1;
    }
  }

  private static void ShowHelp(OptionSet os)
  {
    Console.WriteLine("  ProtoSql [Options]");
    os.WriteOptionDescriptions(Console.Out);
    show_help_ = true;
  }

  private static StringBuilder StartGenerating(AssemblyLoader al)
  {
    StringBuilder sb = new StringBuilder(4096);
    sb.Append("#\n")
      .Append("#IMPORTANT NOTE:\n")
      .Append("#  This file is generated by ProtoSql, DO NOT edit by hand.\n")
      .Append("#\n")
      .AppendFormat("#date: {0}\n", DateTime.Now.ToString())
      .Append("#author: Sirius\n")
      .Append("#\n")
      .AppendFormat("#version: {0}\n", al.FileVersion);

    try
    {
      string[] lines = GetNotes();
      sb.Append("#version notes:\n");
      foreach (string line in lines)
        sb.AppendFormat("#  {0}\n", line);
    }
    catch (Exception e)
    {
    }

    return sb;
  }

  private static string[] GetNotes()
  {
    if (NotePath == null)
      NotePath = Path.ChangeExtension(DataDescriptorPath, "note");

    return File.ReadAllLines(NotePath, Encoding.UTF8);
  }

  static bool show_help_ = false;
}
