// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace DashFire.DataStore {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Message {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_LNReq_Connect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.LNReq_Connect, global::DashFire.DataStore.LNReq_Connect.Builder> internal__static_LNReq_Connect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NLRep_Connect__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.NLRep_Connect, global::DashFire.DataStore.NLRep_Connect.Builder> internal__static_NLRep_Connect__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_LNReq_Save__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.LNReq_Save, global::DashFire.DataStore.LNReq_Save.Builder> internal__static_LNReq_Save__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NLRep_Save__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.NLRep_Save, global::DashFire.DataStore.NLRep_Save.Builder> internal__static_NLRep_Save__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_LNReq_Load__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.LNReq_Load, global::DashFire.DataStore.LNReq_Load.Builder> internal__static_LNReq_Load__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_NLRep_Load__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.NLRep_Load, global::DashFire.DataStore.NLRep_Load.Builder> internal__static_NLRep_Load__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_Item__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Item, global::DashFire.DataStore.DSA_Item.Builder> internal__static_DSA_Item__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_Skill__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Skill, global::DashFire.DataStore.DSA_Skill.Builder> internal__static_DSA_Skill__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_Legacy__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Legacy, global::DashFire.DataStore.DSA_Legacy.Builder> internal__static_DSA_Legacy__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_XSoul__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_XSoul, global::DashFire.DataStore.DSA_XSoul.Builder> internal__static_DSA_XSoul__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_Partner__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Partner, global::DashFire.DataStore.DSA_Partner.Builder> internal__static_DSA_Partner__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_ExpeditionImage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_ExpeditionImage, global::DashFire.DataStore.DSA_ExpeditionImage.Builder> internal__static_DSA_ExpeditionImage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_DSA_ArenaInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_ArenaInfo, global::DashFire.DataStore.DSA_ArenaInfo.Builder> internal__static_DSA_ArenaInfo__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Message() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChdEYXRhU3RvcmUvTWVzc2FnZS5wcm90byIjCg1MTlJlcV9Db25uZWN0EhIK" + 
          "CkNsaWVudE5hbWUYASACKAkiLgoNTkxSZXBfQ29ubmVjdBIOCgZSZXN1bHQY" + 
          "ASACKAgSDQoFRXJyb3IYAiABKAkiTgoKTE5SZXFfU2F2ZRIPCgdkc01zZ0lk" + 
          "GAEgAigNEgsKA2tleRgCIAIoCRIQCghkc19ieXRlcxgDIAIoDBIQCghjaGVj" + 
          "a3N1bRgEIAIoBSKHAQoKTkxSZXBfU2F2ZRIPCgdkc01zZ0lkGAEgAigNEgsK" + 
          "A2tleRgCIAIoCRImCgZyZXN1bHQYAyACKA4yFi5OTFJlcF9TYXZlLlNhdmVS" + 
          "ZXN1bHQSDQoFZXJyb3IYBCABKAkiJAoKU2F2ZVJlc3VsdBILCgdTdWNjZXNz" + 
          "EAASCQoFRXJyb3IQASIqCgpMTlJlcV9Mb2FkEg8KB2RzTXNnSWQYASACKA0S" + 
          "CwoDa2V5GAIgAigJIq8BCgpOTFJlcF9Mb2FkEg8KB2RzTXNnSWQYASACKA0S" + 
          "CwoDa2V5GAIgAigJEiYKBnJlc3VsdBgDIAIoDjIWLk5MUmVwX0xvYWQuTG9h" + 
          "ZFJlc3VsdBINCgVlcnJvchgEIAEoCRIMCgRkYXRhGAUgASgMIj4KCkxvYWRS" + 
          "ZXN1bHQSCwoHU3VjY2VzcxAAEgwKCE5vdEZvdW5kEAESCQoFRXJyb3IQAhIK" + 
          "CgZVbmRvbmUQAyJRCghEU0FfSXRlbRIOCgZJdGVtSWQYASABKAUSDQoFTGV2" + 
          "ZWwYAiABKAUSDgoGTnVtYmVyGAMgASgFEhYKDkFwcGVuZFByb3BlcnR5GAQg" + 
          "ASgFIjgKCURTQV9Ta2lsbBIKCgJJRBgBIAEoBRINCgVMZXZlbBgCIAEoBRIQ" + 
          "CghQb3N0aW9ucxgDIAEoBSJVCgpEU0FfTGVnYWN5Eg4KBkl0ZW1JZBgBIAEo" + 
          "BRINCgVMZXZlbBgCIAEoBRIWCg5BcHBlbmRQcm9wZXJ0eRgDIAEoBRIQCghJ" + 
          "c1VubG9jaxgEIAEoCCJSCglEU0FfWFNvdWwSDgoGSXRlbUlkGAEgASgFEg0K" + 
          "BUxldmVsGAIgASgFEhIKCkV4cGVyaWVuY2UYAyABKAUSEgoKTW9kZWxMZXZl" + 
          "bBgEIAEoBSJLCgtEU0FfUGFydG5lchIRCglQYXJ0bmVySWQYASACKAUSFQoN" + 
          "QWRkaXRpb25MZXZlbBgCIAIoBRISCgpTa2lsbExldmVsGAMgAigFIskBChNE" + 
          "U0FfRXhwZWRpdGlvbkltYWdlEgwKBEd1aWQYASABKAQSDgoGSGVyb0lkGAIg" + 
          "ASgFEhAKCE5pY2tuYW1lGAMgASgJEg0KBUxldmVsGAQgASgFEhUKDUZpZ2h0" + 
          "aW5nU2NvcmUYBSABKAUSHAoJRXF1aXBMaXN0GAYgAygLMgkuRFNBX0l0ZW0S" + 
          "HQoJU2tpbGxMaXN0GAcgAygLMgouRFNBX1NraWxsEh8KCkxlZ2FjeUxpc3QY" + 
          "CCADKAsyCy5EU0FfTGVnYWN5IqoCCg1EU0FfQXJlbmFJbmZvEgwKBEd1aWQY" + 
          "ASABKAQSDgoGSGVyb0lkGAIgASgFEhAKCE5pY2tuYW1lGAMgASgJEg0KBUxl" + 
          "dmVsGAQgASgFEhUKDUZpZ2h0aW5nU2NvcmUYBSABKAUSHAoJRXF1aXBMaXN0" + 
          "GAYgAygLMgkuRFNBX0l0ZW0SHQoJU2tpbGxMaXN0GAcgAygLMgouRFNBX1Nr" + 
          "aWxsEh8KCkxlZ2FjeUxpc3QYCCADKAsyCy5EU0FfTGVnYWN5Eh0KCVhTb3Vs" + 
          "TGlzdBgJIAMoCzIKLkRTQV9YU291bBIhCgtQYXJ0bmVyTGlzdBgKIAMoCzIM" + 
          "LkRTQV9QYXJ0bmVyEiMKDUFjdGl2ZVBhcnRuZXIYCyABKAsyDC5EU0FfUGFy" + 
          "dG5lcg==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_LNReq_Connect__Descriptor = Descriptor.MessageTypes[0];
        internal__static_LNReq_Connect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.LNReq_Connect, global::DashFire.DataStore.LNReq_Connect.Builder>(internal__static_LNReq_Connect__Descriptor,
                new string[] { "ClientName", });
        internal__static_NLRep_Connect__Descriptor = Descriptor.MessageTypes[1];
        internal__static_NLRep_Connect__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.NLRep_Connect, global::DashFire.DataStore.NLRep_Connect.Builder>(internal__static_NLRep_Connect__Descriptor,
                new string[] { "Result", "Error", });
        internal__static_LNReq_Save__Descriptor = Descriptor.MessageTypes[2];
        internal__static_LNReq_Save__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.LNReq_Save, global::DashFire.DataStore.LNReq_Save.Builder>(internal__static_LNReq_Save__Descriptor,
                new string[] { "DsMsgId", "Key", "DsBytes", "Checksum", });
        internal__static_NLRep_Save__Descriptor = Descriptor.MessageTypes[3];
        internal__static_NLRep_Save__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.NLRep_Save, global::DashFire.DataStore.NLRep_Save.Builder>(internal__static_NLRep_Save__Descriptor,
                new string[] { "DsMsgId", "Key", "Result", "Error", });
        internal__static_LNReq_Load__Descriptor = Descriptor.MessageTypes[4];
        internal__static_LNReq_Load__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.LNReq_Load, global::DashFire.DataStore.LNReq_Load.Builder>(internal__static_LNReq_Load__Descriptor,
                new string[] { "DsMsgId", "Key", });
        internal__static_NLRep_Load__Descriptor = Descriptor.MessageTypes[5];
        internal__static_NLRep_Load__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.NLRep_Load, global::DashFire.DataStore.NLRep_Load.Builder>(internal__static_NLRep_Load__Descriptor,
                new string[] { "DsMsgId", "Key", "Result", "Error", "Data", });
        internal__static_DSA_Item__Descriptor = Descriptor.MessageTypes[6];
        internal__static_DSA_Item__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Item, global::DashFire.DataStore.DSA_Item.Builder>(internal__static_DSA_Item__Descriptor,
                new string[] { "ItemId", "Level", "Number", "AppendProperty", });
        internal__static_DSA_Skill__Descriptor = Descriptor.MessageTypes[7];
        internal__static_DSA_Skill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Skill, global::DashFire.DataStore.DSA_Skill.Builder>(internal__static_DSA_Skill__Descriptor,
                new string[] { "ID", "Level", "Postions", });
        internal__static_DSA_Legacy__Descriptor = Descriptor.MessageTypes[8];
        internal__static_DSA_Legacy__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Legacy, global::DashFire.DataStore.DSA_Legacy.Builder>(internal__static_DSA_Legacy__Descriptor,
                new string[] { "ItemId", "Level", "AppendProperty", "IsUnlock", });
        internal__static_DSA_XSoul__Descriptor = Descriptor.MessageTypes[9];
        internal__static_DSA_XSoul__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_XSoul, global::DashFire.DataStore.DSA_XSoul.Builder>(internal__static_DSA_XSoul__Descriptor,
                new string[] { "ItemId", "Level", "Experience", "ModelLevel", });
        internal__static_DSA_Partner__Descriptor = Descriptor.MessageTypes[10];
        internal__static_DSA_Partner__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_Partner, global::DashFire.DataStore.DSA_Partner.Builder>(internal__static_DSA_Partner__Descriptor,
                new string[] { "PartnerId", "AdditionLevel", "SkillLevel", });
        internal__static_DSA_ExpeditionImage__Descriptor = Descriptor.MessageTypes[11];
        internal__static_DSA_ExpeditionImage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_ExpeditionImage, global::DashFire.DataStore.DSA_ExpeditionImage.Builder>(internal__static_DSA_ExpeditionImage__Descriptor,
                new string[] { "Guid", "HeroId", "Nickname", "Level", "FightingScore", "EquipList", "SkillList", "LegacyList", });
        internal__static_DSA_ArenaInfo__Descriptor = Descriptor.MessageTypes[12];
        internal__static_DSA_ArenaInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::DashFire.DataStore.DSA_ArenaInfo, global::DashFire.DataStore.DSA_ArenaInfo.Builder>(internal__static_DSA_ArenaInfo__Descriptor,
                new string[] { "Guid", "HeroId", "Nickname", "Level", "FightingScore", "EquipList", "SkillList", "LegacyList", "XSoulList", "PartnerList", "ActivePartner", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LNReq_Connect : pb::GeneratedMessage<LNReq_Connect, LNReq_Connect.Builder> {
    private LNReq_Connect() { }
    private static readonly LNReq_Connect defaultInstance = new LNReq_Connect().MakeReadOnly();
    private static readonly string[] _lNReqConnectFieldNames = new string[] { "ClientName" };
    private static readonly uint[] _lNReqConnectFieldTags = new uint[] { 10 };
    public static LNReq_Connect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LNReq_Connect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LNReq_Connect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_LNReq_Connect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LNReq_Connect, LNReq_Connect.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_LNReq_Connect__FieldAccessorTable; }
    }
    
    public const int ClientNameFieldNumber = 1;
    private bool hasClientName;
    private string clientName_ = "";
    public bool HasClientName {
      get { return hasClientName; }
    }
    public string ClientName {
      get { return clientName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClientName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _lNReqConnectFieldNames;
      if (hasClientName) {
        output.WriteString(1, field_names[0], ClientName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClientName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ClientName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LNReq_Connect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Connect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LNReq_Connect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LNReq_Connect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LNReq_Connect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LNReq_Connect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LNReq_Connect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LNReq_Connect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LNReq_Connect result;
      
      private LNReq_Connect PrepareBuilder() {
        if (resultIsReadOnly) {
          LNReq_Connect original = result;
          result = new LNReq_Connect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LNReq_Connect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.LNReq_Connect.Descriptor; }
      }
      
      public override LNReq_Connect DefaultInstanceForType {
        get { return global::DashFire.DataStore.LNReq_Connect.DefaultInstance; }
      }
      
      public override LNReq_Connect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LNReq_Connect) {
          return MergeFrom((LNReq_Connect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LNReq_Connect other) {
        if (other == global::DashFire.DataStore.LNReq_Connect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClientName) {
          ClientName = other.ClientName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_lNReqConnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _lNReqConnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClientName = input.ReadString(ref result.clientName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClientName {
        get { return result.hasClientName; }
      }
      public string ClientName {
        get { return result.ClientName; }
        set { SetClientName(value); }
      }
      public Builder SetClientName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientName = true;
        result.clientName_ = value;
        return this;
      }
      public Builder ClearClientName() {
        PrepareBuilder();
        result.hasClientName = false;
        result.clientName_ = "";
        return this;
      }
    }
    static LNReq_Connect() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NLRep_Connect : pb::GeneratedMessage<NLRep_Connect, NLRep_Connect.Builder> {
    private NLRep_Connect() { }
    private static readonly NLRep_Connect defaultInstance = new NLRep_Connect().MakeReadOnly();
    private static readonly string[] _nLRepConnectFieldNames = new string[] { "Error", "Result" };
    private static readonly uint[] _nLRepConnectFieldTags = new uint[] { 18, 8 };
    public static NLRep_Connect DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NLRep_Connect DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NLRep_Connect ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_NLRep_Connect__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NLRep_Connect, NLRep_Connect.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_NLRep_Connect__FieldAccessorTable; }
    }
    
    public const int ResultFieldNumber = 1;
    private bool hasResult;
    private bool result_;
    public bool HasResult {
      get { return hasResult; }
    }
    public bool Result {
      get { return result_; }
    }
    
    public const int ErrorFieldNumber = 2;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nLRepConnectFieldNames;
      if (hasResult) {
        output.WriteBool(1, field_names[1], Result);
      }
      if (hasError) {
        output.WriteString(2, field_names[0], Error);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Result);
        }
        if (hasError) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Error);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NLRep_Connect ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Connect ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NLRep_Connect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NLRep_Connect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NLRep_Connect MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NLRep_Connect prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NLRep_Connect, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NLRep_Connect cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NLRep_Connect result;
      
      private NLRep_Connect PrepareBuilder() {
        if (resultIsReadOnly) {
          NLRep_Connect original = result;
          result = new NLRep_Connect();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NLRep_Connect MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.NLRep_Connect.Descriptor; }
      }
      
      public override NLRep_Connect DefaultInstanceForType {
        get { return global::DashFire.DataStore.NLRep_Connect.DefaultInstance; }
      }
      
      public override NLRep_Connect BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NLRep_Connect) {
          return MergeFrom((NLRep_Connect) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NLRep_Connect other) {
        if (other == global::DashFire.DataStore.NLRep_Connect.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasError) {
          Error = other.Error;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nLRepConnectFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nLRepConnectFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasResult = input.ReadBool(ref result.result_);
              break;
            }
            case 18: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasResult {
        get { return result.hasResult; }
      }
      public bool Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(bool value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = false;
        return this;
      }
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
    }
    static NLRep_Connect() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LNReq_Save : pb::GeneratedMessage<LNReq_Save, LNReq_Save.Builder> {
    private LNReq_Save() { }
    private static readonly LNReq_Save defaultInstance = new LNReq_Save().MakeReadOnly();
    private static readonly string[] _lNReqSaveFieldNames = new string[] { "checksum", "dsMsgId", "ds_bytes", "key" };
    private static readonly uint[] _lNReqSaveFieldTags = new uint[] { 32, 8, 26, 18 };
    public static LNReq_Save DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LNReq_Save DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LNReq_Save ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_LNReq_Save__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LNReq_Save, LNReq_Save.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_LNReq_Save__FieldAccessorTable; }
    }
    
    public const int DsMsgIdFieldNumber = 1;
    private bool hasDsMsgId;
    private uint dsMsgId_;
    public bool HasDsMsgId {
      get { return hasDsMsgId; }
    }
    public uint DsMsgId {
      get { return dsMsgId_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int DsBytesFieldNumber = 3;
    private bool hasDsBytes;
    private pb::ByteString dsBytes_ = pb::ByteString.Empty;
    public bool HasDsBytes {
      get { return hasDsBytes; }
    }
    public pb::ByteString DsBytes {
      get { return dsBytes_; }
    }
    
    public const int ChecksumFieldNumber = 4;
    private bool hasChecksum;
    private int checksum_;
    public bool HasChecksum {
      get { return hasChecksum; }
    }
    public int Checksum {
      get { return checksum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDsMsgId) return false;
        if (!hasKey) return false;
        if (!hasDsBytes) return false;
        if (!hasChecksum) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _lNReqSaveFieldNames;
      if (hasDsMsgId) {
        output.WriteUInt32(1, field_names[1], DsMsgId);
      }
      if (hasKey) {
        output.WriteString(2, field_names[3], Key);
      }
      if (hasDsBytes) {
        output.WriteBytes(3, field_names[2], DsBytes);
      }
      if (hasChecksum) {
        output.WriteInt32(4, field_names[0], Checksum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDsMsgId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, DsMsgId);
        }
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Key);
        }
        if (hasDsBytes) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, DsBytes);
        }
        if (hasChecksum) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Checksum);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LNReq_Save ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LNReq_Save ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Save ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LNReq_Save ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Save ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LNReq_Save ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Save ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LNReq_Save ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LNReq_Save ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LNReq_Save ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LNReq_Save MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LNReq_Save prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LNReq_Save, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LNReq_Save cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LNReq_Save result;
      
      private LNReq_Save PrepareBuilder() {
        if (resultIsReadOnly) {
          LNReq_Save original = result;
          result = new LNReq_Save();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LNReq_Save MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.LNReq_Save.Descriptor; }
      }
      
      public override LNReq_Save DefaultInstanceForType {
        get { return global::DashFire.DataStore.LNReq_Save.DefaultInstance; }
      }
      
      public override LNReq_Save BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LNReq_Save) {
          return MergeFrom((LNReq_Save) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LNReq_Save other) {
        if (other == global::DashFire.DataStore.LNReq_Save.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDsMsgId) {
          DsMsgId = other.DsMsgId;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasDsBytes) {
          DsBytes = other.DsBytes;
        }
        if (other.HasChecksum) {
          Checksum = other.Checksum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_lNReqSaveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _lNReqSaveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDsMsgId = input.ReadUInt32(ref result.dsMsgId_);
              break;
            }
            case 18: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 26: {
              result.hasDsBytes = input.ReadBytes(ref result.dsBytes_);
              break;
            }
            case 32: {
              result.hasChecksum = input.ReadInt32(ref result.checksum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDsMsgId {
        get { return result.hasDsMsgId; }
      }
      public uint DsMsgId {
        get { return result.DsMsgId; }
        set { SetDsMsgId(value); }
      }
      public Builder SetDsMsgId(uint value) {
        PrepareBuilder();
        result.hasDsMsgId = true;
        result.dsMsgId_ = value;
        return this;
      }
      public Builder ClearDsMsgId() {
        PrepareBuilder();
        result.hasDsMsgId = false;
        result.dsMsgId_ = 0;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasDsBytes {
        get { return result.hasDsBytes; }
      }
      public pb::ByteString DsBytes {
        get { return result.DsBytes; }
        set { SetDsBytes(value); }
      }
      public Builder SetDsBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDsBytes = true;
        result.dsBytes_ = value;
        return this;
      }
      public Builder ClearDsBytes() {
        PrepareBuilder();
        result.hasDsBytes = false;
        result.dsBytes_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasChecksum {
        get { return result.hasChecksum; }
      }
      public int Checksum {
        get { return result.Checksum; }
        set { SetChecksum(value); }
      }
      public Builder SetChecksum(int value) {
        PrepareBuilder();
        result.hasChecksum = true;
        result.checksum_ = value;
        return this;
      }
      public Builder ClearChecksum() {
        PrepareBuilder();
        result.hasChecksum = false;
        result.checksum_ = 0;
        return this;
      }
    }
    static LNReq_Save() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NLRep_Save : pb::GeneratedMessage<NLRep_Save, NLRep_Save.Builder> {
    private NLRep_Save() { }
    private static readonly NLRep_Save defaultInstance = new NLRep_Save().MakeReadOnly();
    private static readonly string[] _nLRepSaveFieldNames = new string[] { "dsMsgId", "error", "key", "result" };
    private static readonly uint[] _nLRepSaveFieldTags = new uint[] { 8, 34, 18, 24 };
    public static NLRep_Save DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NLRep_Save DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NLRep_Save ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_NLRep_Save__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NLRep_Save, NLRep_Save.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_NLRep_Save__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum SaveResult {
        Success = 0,
        Error = 1,
      }
      
    }
    #endregion
    
    public const int DsMsgIdFieldNumber = 1;
    private bool hasDsMsgId;
    private uint dsMsgId_;
    public bool HasDsMsgId {
      get { return hasDsMsgId; }
    }
    public uint DsMsgId {
      get { return dsMsgId_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private global::DashFire.DataStore.NLRep_Save.Types.SaveResult result_ = global::DashFire.DataStore.NLRep_Save.Types.SaveResult.Success;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::DashFire.DataStore.NLRep_Save.Types.SaveResult Result {
      get { return result_; }
    }
    
    public const int ErrorFieldNumber = 4;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDsMsgId) return false;
        if (!hasKey) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nLRepSaveFieldNames;
      if (hasDsMsgId) {
        output.WriteUInt32(1, field_names[0], DsMsgId);
      }
      if (hasKey) {
        output.WriteString(2, field_names[2], Key);
      }
      if (hasResult) {
        output.WriteEnum(3, field_names[3], (int) Result, Result);
      }
      if (hasError) {
        output.WriteString(4, field_names[1], Error);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDsMsgId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, DsMsgId);
        }
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Key);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Result);
        }
        if (hasError) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Error);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NLRep_Save ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NLRep_Save ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Save ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NLRep_Save ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Save ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NLRep_Save ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Save ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NLRep_Save ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NLRep_Save ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NLRep_Save ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NLRep_Save MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NLRep_Save prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NLRep_Save, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NLRep_Save cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NLRep_Save result;
      
      private NLRep_Save PrepareBuilder() {
        if (resultIsReadOnly) {
          NLRep_Save original = result;
          result = new NLRep_Save();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NLRep_Save MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.NLRep_Save.Descriptor; }
      }
      
      public override NLRep_Save DefaultInstanceForType {
        get { return global::DashFire.DataStore.NLRep_Save.DefaultInstance; }
      }
      
      public override NLRep_Save BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NLRep_Save) {
          return MergeFrom((NLRep_Save) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NLRep_Save other) {
        if (other == global::DashFire.DataStore.NLRep_Save.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDsMsgId) {
          DsMsgId = other.DsMsgId;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasError) {
          Error = other.Error;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nLRepSaveFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nLRepSaveFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDsMsgId = input.ReadUInt32(ref result.dsMsgId_);
              break;
            }
            case 18: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.result_, out unknown)) {
                result.hasResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDsMsgId {
        get { return result.hasDsMsgId; }
      }
      public uint DsMsgId {
        get { return result.DsMsgId; }
        set { SetDsMsgId(value); }
      }
      public Builder SetDsMsgId(uint value) {
        PrepareBuilder();
        result.hasDsMsgId = true;
        result.dsMsgId_ = value;
        return this;
      }
      public Builder ClearDsMsgId() {
        PrepareBuilder();
        result.hasDsMsgId = false;
        result.dsMsgId_ = 0;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasResult {
       get { return result.hasResult; }
      }
      public global::DashFire.DataStore.NLRep_Save.Types.SaveResult Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::DashFire.DataStore.NLRep_Save.Types.SaveResult value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = global::DashFire.DataStore.NLRep_Save.Types.SaveResult.Success;
        return this;
      }
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
    }
    static NLRep_Save() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LNReq_Load : pb::GeneratedMessage<LNReq_Load, LNReq_Load.Builder> {
    private LNReq_Load() { }
    private static readonly LNReq_Load defaultInstance = new LNReq_Load().MakeReadOnly();
    private static readonly string[] _lNReqLoadFieldNames = new string[] { "dsMsgId", "key" };
    private static readonly uint[] _lNReqLoadFieldTags = new uint[] { 8, 18 };
    public static LNReq_Load DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LNReq_Load DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LNReq_Load ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_LNReq_Load__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LNReq_Load, LNReq_Load.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_LNReq_Load__FieldAccessorTable; }
    }
    
    public const int DsMsgIdFieldNumber = 1;
    private bool hasDsMsgId;
    private uint dsMsgId_;
    public bool HasDsMsgId {
      get { return hasDsMsgId; }
    }
    public uint DsMsgId {
      get { return dsMsgId_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDsMsgId) return false;
        if (!hasKey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _lNReqLoadFieldNames;
      if (hasDsMsgId) {
        output.WriteUInt32(1, field_names[0], DsMsgId);
      }
      if (hasKey) {
        output.WriteString(2, field_names[1], Key);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDsMsgId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, DsMsgId);
        }
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Key);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LNReq_Load ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LNReq_Load ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Load ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LNReq_Load ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Load ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LNReq_Load ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LNReq_Load ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LNReq_Load ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LNReq_Load ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LNReq_Load ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LNReq_Load MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LNReq_Load prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LNReq_Load, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LNReq_Load cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LNReq_Load result;
      
      private LNReq_Load PrepareBuilder() {
        if (resultIsReadOnly) {
          LNReq_Load original = result;
          result = new LNReq_Load();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LNReq_Load MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.LNReq_Load.Descriptor; }
      }
      
      public override LNReq_Load DefaultInstanceForType {
        get { return global::DashFire.DataStore.LNReq_Load.DefaultInstance; }
      }
      
      public override LNReq_Load BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LNReq_Load) {
          return MergeFrom((LNReq_Load) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LNReq_Load other) {
        if (other == global::DashFire.DataStore.LNReq_Load.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDsMsgId) {
          DsMsgId = other.DsMsgId;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_lNReqLoadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _lNReqLoadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDsMsgId = input.ReadUInt32(ref result.dsMsgId_);
              break;
            }
            case 18: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDsMsgId {
        get { return result.hasDsMsgId; }
      }
      public uint DsMsgId {
        get { return result.DsMsgId; }
        set { SetDsMsgId(value); }
      }
      public Builder SetDsMsgId(uint value) {
        PrepareBuilder();
        result.hasDsMsgId = true;
        result.dsMsgId_ = value;
        return this;
      }
      public Builder ClearDsMsgId() {
        PrepareBuilder();
        result.hasDsMsgId = false;
        result.dsMsgId_ = 0;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
    }
    static LNReq_Load() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NLRep_Load : pb::GeneratedMessage<NLRep_Load, NLRep_Load.Builder> {
    private NLRep_Load() { }
    private static readonly NLRep_Load defaultInstance = new NLRep_Load().MakeReadOnly();
    private static readonly string[] _nLRepLoadFieldNames = new string[] { "data", "dsMsgId", "error", "key", "result" };
    private static readonly uint[] _nLRepLoadFieldTags = new uint[] { 42, 8, 34, 18, 24 };
    public static NLRep_Load DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NLRep_Load DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NLRep_Load ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_NLRep_Load__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NLRep_Load, NLRep_Load.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_NLRep_Load__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum LoadResult {
        Success = 0,
        NotFound = 1,
        Error = 2,
        Undone = 3,
      }
      
    }
    #endregion
    
    public const int DsMsgIdFieldNumber = 1;
    private bool hasDsMsgId;
    private uint dsMsgId_;
    public bool HasDsMsgId {
      get { return hasDsMsgId; }
    }
    public uint DsMsgId {
      get { return dsMsgId_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int ResultFieldNumber = 3;
    private bool hasResult;
    private global::DashFire.DataStore.NLRep_Load.Types.LoadResult result_ = global::DashFire.DataStore.NLRep_Load.Types.LoadResult.Success;
    public bool HasResult {
      get { return hasResult; }
    }
    public global::DashFire.DataStore.NLRep_Load.Types.LoadResult Result {
      get { return result_; }
    }
    
    public const int ErrorFieldNumber = 4;
    private bool hasError;
    private string error_ = "";
    public bool HasError {
      get { return hasError; }
    }
    public string Error {
      get { return error_; }
    }
    
    public const int DataFieldNumber = 5;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDsMsgId) return false;
        if (!hasKey) return false;
        if (!hasResult) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nLRepLoadFieldNames;
      if (hasDsMsgId) {
        output.WriteUInt32(1, field_names[1], DsMsgId);
      }
      if (hasKey) {
        output.WriteString(2, field_names[3], Key);
      }
      if (hasResult) {
        output.WriteEnum(3, field_names[4], (int) Result, Result);
      }
      if (hasError) {
        output.WriteString(4, field_names[2], Error);
      }
      if (hasData) {
        output.WriteBytes(5, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDsMsgId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, DsMsgId);
        }
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Key);
        }
        if (hasResult) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Result);
        }
        if (hasError) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Error);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeBytesSize(5, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NLRep_Load ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NLRep_Load ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Load ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NLRep_Load ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Load ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NLRep_Load ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NLRep_Load ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NLRep_Load ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NLRep_Load ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NLRep_Load ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NLRep_Load MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NLRep_Load prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NLRep_Load, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NLRep_Load cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NLRep_Load result;
      
      private NLRep_Load PrepareBuilder() {
        if (resultIsReadOnly) {
          NLRep_Load original = result;
          result = new NLRep_Load();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NLRep_Load MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.NLRep_Load.Descriptor; }
      }
      
      public override NLRep_Load DefaultInstanceForType {
        get { return global::DashFire.DataStore.NLRep_Load.DefaultInstance; }
      }
      
      public override NLRep_Load BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NLRep_Load) {
          return MergeFrom((NLRep_Load) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NLRep_Load other) {
        if (other == global::DashFire.DataStore.NLRep_Load.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDsMsgId) {
          DsMsgId = other.DsMsgId;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasResult) {
          Result = other.Result;
        }
        if (other.HasError) {
          Error = other.Error;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nLRepLoadFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nLRepLoadFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasDsMsgId = input.ReadUInt32(ref result.dsMsgId_);
              break;
            }
            case 18: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.result_, out unknown)) {
                result.hasResult = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 34: {
              result.hasError = input.ReadString(ref result.error_);
              break;
            }
            case 42: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDsMsgId {
        get { return result.hasDsMsgId; }
      }
      public uint DsMsgId {
        get { return result.DsMsgId; }
        set { SetDsMsgId(value); }
      }
      public Builder SetDsMsgId(uint value) {
        PrepareBuilder();
        result.hasDsMsgId = true;
        result.dsMsgId_ = value;
        return this;
      }
      public Builder ClearDsMsgId() {
        PrepareBuilder();
        result.hasDsMsgId = false;
        result.dsMsgId_ = 0;
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasResult {
       get { return result.hasResult; }
      }
      public global::DashFire.DataStore.NLRep_Load.Types.LoadResult Result {
        get { return result.Result; }
        set { SetResult(value); }
      }
      public Builder SetResult(global::DashFire.DataStore.NLRep_Load.Types.LoadResult value) {
        PrepareBuilder();
        result.hasResult = true;
        result.result_ = value;
        return this;
      }
      public Builder ClearResult() {
        PrepareBuilder();
        result.hasResult = false;
        result.result_ = global::DashFire.DataStore.NLRep_Load.Types.LoadResult.Success;
        return this;
      }
      
      public bool HasError {
        get { return result.hasError; }
      }
      public string Error {
        get { return result.Error; }
        set { SetError(value); }
      }
      public Builder SetError(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasError = true;
        result.error_ = value;
        return this;
      }
      public Builder ClearError() {
        PrepareBuilder();
        result.hasError = false;
        result.error_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static NLRep_Load() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_Item : pb::GeneratedMessage<DSA_Item, DSA_Item.Builder> {
    private DSA_Item() { }
    private static readonly DSA_Item defaultInstance = new DSA_Item().MakeReadOnly();
    private static readonly string[] _dSAItemFieldNames = new string[] { "AppendProperty", "ItemId", "Level", "Number" };
    private static readonly uint[] _dSAItemFieldTags = new uint[] { 32, 8, 16, 24 };
    public static DSA_Item DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_Item DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_Item ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Item__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_Item, DSA_Item.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Item__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int NumberFieldNumber = 3;
    private bool hasNumber;
    private int number_;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    public const int AppendPropertyFieldNumber = 4;
    private bool hasAppendProperty;
    private int appendProperty_;
    public bool HasAppendProperty {
      get { return hasAppendProperty; }
    }
    public int AppendProperty {
      get { return appendProperty_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSAItemFieldNames;
      if (hasItemId) {
        output.WriteInt32(1, field_names[1], ItemId);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[2], Level);
      }
      if (hasNumber) {
        output.WriteInt32(3, field_names[3], Number);
      }
      if (hasAppendProperty) {
        output.WriteInt32(4, field_names[0], AppendProperty);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Number);
        }
        if (hasAppendProperty) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AppendProperty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_Item ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Item ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Item ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_Item ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_Item ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_Item MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_Item prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_Item, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_Item cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_Item result;
      
      private DSA_Item PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_Item original = result;
          result = new DSA_Item();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_Item MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_Item.Descriptor; }
      }
      
      public override DSA_Item DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_Item.DefaultInstance; }
      }
      
      public override DSA_Item BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_Item) {
          return MergeFrom((DSA_Item) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_Item other) {
        if (other == global::DashFire.DataStore.DSA_Item.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasNumber) {
          Number = other.Number;
        }
        if (other.HasAppendProperty) {
          AppendProperty = other.AppendProperty;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSAItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSAItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasNumber = input.ReadInt32(ref result.number_);
              break;
            }
            case 32: {
              result.hasAppendProperty = input.ReadInt32(ref result.appendProperty_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasNumber {
        get { return result.hasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        PrepareBuilder();
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        PrepareBuilder();
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
      
      public bool HasAppendProperty {
        get { return result.hasAppendProperty; }
      }
      public int AppendProperty {
        get { return result.AppendProperty; }
        set { SetAppendProperty(value); }
      }
      public Builder SetAppendProperty(int value) {
        PrepareBuilder();
        result.hasAppendProperty = true;
        result.appendProperty_ = value;
        return this;
      }
      public Builder ClearAppendProperty() {
        PrepareBuilder();
        result.hasAppendProperty = false;
        result.appendProperty_ = 0;
        return this;
      }
    }
    static DSA_Item() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_Skill : pb::GeneratedMessage<DSA_Skill, DSA_Skill.Builder> {
    private DSA_Skill() { }
    private static readonly DSA_Skill defaultInstance = new DSA_Skill().MakeReadOnly();
    private static readonly string[] _dSASkillFieldNames = new string[] { "ID", "Level", "Postions" };
    private static readonly uint[] _dSASkillFieldTags = new uint[] { 8, 16, 24 };
    public static DSA_Skill DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_Skill DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_Skill ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Skill__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_Skill, DSA_Skill.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Skill__FieldAccessorTable; }
    }
    
    public const int IDFieldNumber = 1;
    private bool hasID;
    private int iD_;
    public bool HasID {
      get { return hasID; }
    }
    public int ID {
      get { return iD_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int PostionsFieldNumber = 3;
    private bool hasPostions;
    private int postions_;
    public bool HasPostions {
      get { return hasPostions; }
    }
    public int Postions {
      get { return postions_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSASkillFieldNames;
      if (hasID) {
        output.WriteInt32(1, field_names[0], ID);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[1], Level);
      }
      if (hasPostions) {
        output.WriteInt32(3, field_names[2], Postions);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasID) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ID);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasPostions) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Postions);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_Skill ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Skill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Skill ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Skill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Skill ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Skill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_Skill ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_Skill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_Skill ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Skill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_Skill MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_Skill prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_Skill, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_Skill cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_Skill result;
      
      private DSA_Skill PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_Skill original = result;
          result = new DSA_Skill();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_Skill MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_Skill.Descriptor; }
      }
      
      public override DSA_Skill DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_Skill.DefaultInstance; }
      }
      
      public override DSA_Skill BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_Skill) {
          return MergeFrom((DSA_Skill) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_Skill other) {
        if (other == global::DashFire.DataStore.DSA_Skill.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasID) {
          ID = other.ID;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasPostions) {
          Postions = other.Postions;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSASkillFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSASkillFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasID = input.ReadInt32(ref result.iD_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasPostions = input.ReadInt32(ref result.postions_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasID {
        get { return result.hasID; }
      }
      public int ID {
        get { return result.ID; }
        set { SetID(value); }
      }
      public Builder SetID(int value) {
        PrepareBuilder();
        result.hasID = true;
        result.iD_ = value;
        return this;
      }
      public Builder ClearID() {
        PrepareBuilder();
        result.hasID = false;
        result.iD_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasPostions {
        get { return result.hasPostions; }
      }
      public int Postions {
        get { return result.Postions; }
        set { SetPostions(value); }
      }
      public Builder SetPostions(int value) {
        PrepareBuilder();
        result.hasPostions = true;
        result.postions_ = value;
        return this;
      }
      public Builder ClearPostions() {
        PrepareBuilder();
        result.hasPostions = false;
        result.postions_ = 0;
        return this;
      }
    }
    static DSA_Skill() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_Legacy : pb::GeneratedMessage<DSA_Legacy, DSA_Legacy.Builder> {
    private DSA_Legacy() { }
    private static readonly DSA_Legacy defaultInstance = new DSA_Legacy().MakeReadOnly();
    private static readonly string[] _dSALegacyFieldNames = new string[] { "AppendProperty", "IsUnlock", "ItemId", "Level" };
    private static readonly uint[] _dSALegacyFieldTags = new uint[] { 24, 32, 8, 16 };
    public static DSA_Legacy DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_Legacy DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_Legacy ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Legacy__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_Legacy, DSA_Legacy.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Legacy__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int AppendPropertyFieldNumber = 3;
    private bool hasAppendProperty;
    private int appendProperty_;
    public bool HasAppendProperty {
      get { return hasAppendProperty; }
    }
    public int AppendProperty {
      get { return appendProperty_; }
    }
    
    public const int IsUnlockFieldNumber = 4;
    private bool hasIsUnlock;
    private bool isUnlock_;
    public bool HasIsUnlock {
      get { return hasIsUnlock; }
    }
    public bool IsUnlock {
      get { return isUnlock_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSALegacyFieldNames;
      if (hasItemId) {
        output.WriteInt32(1, field_names[2], ItemId);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[3], Level);
      }
      if (hasAppendProperty) {
        output.WriteInt32(3, field_names[0], AppendProperty);
      }
      if (hasIsUnlock) {
        output.WriteBool(4, field_names[1], IsUnlock);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasAppendProperty) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, AppendProperty);
        }
        if (hasIsUnlock) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsUnlock);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_Legacy ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_Legacy ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_Legacy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Legacy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_Legacy MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_Legacy prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_Legacy, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_Legacy cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_Legacy result;
      
      private DSA_Legacy PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_Legacy original = result;
          result = new DSA_Legacy();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_Legacy MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_Legacy.Descriptor; }
      }
      
      public override DSA_Legacy DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_Legacy.DefaultInstance; }
      }
      
      public override DSA_Legacy BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_Legacy) {
          return MergeFrom((DSA_Legacy) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_Legacy other) {
        if (other == global::DashFire.DataStore.DSA_Legacy.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasAppendProperty) {
          AppendProperty = other.AppendProperty;
        }
        if (other.HasIsUnlock) {
          IsUnlock = other.IsUnlock;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSALegacyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSALegacyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasAppendProperty = input.ReadInt32(ref result.appendProperty_);
              break;
            }
            case 32: {
              result.hasIsUnlock = input.ReadBool(ref result.isUnlock_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasAppendProperty {
        get { return result.hasAppendProperty; }
      }
      public int AppendProperty {
        get { return result.AppendProperty; }
        set { SetAppendProperty(value); }
      }
      public Builder SetAppendProperty(int value) {
        PrepareBuilder();
        result.hasAppendProperty = true;
        result.appendProperty_ = value;
        return this;
      }
      public Builder ClearAppendProperty() {
        PrepareBuilder();
        result.hasAppendProperty = false;
        result.appendProperty_ = 0;
        return this;
      }
      
      public bool HasIsUnlock {
        get { return result.hasIsUnlock; }
      }
      public bool IsUnlock {
        get { return result.IsUnlock; }
        set { SetIsUnlock(value); }
      }
      public Builder SetIsUnlock(bool value) {
        PrepareBuilder();
        result.hasIsUnlock = true;
        result.isUnlock_ = value;
        return this;
      }
      public Builder ClearIsUnlock() {
        PrepareBuilder();
        result.hasIsUnlock = false;
        result.isUnlock_ = false;
        return this;
      }
    }
    static DSA_Legacy() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_XSoul : pb::GeneratedMessage<DSA_XSoul, DSA_XSoul.Builder> {
    private DSA_XSoul() { }
    private static readonly DSA_XSoul defaultInstance = new DSA_XSoul().MakeReadOnly();
    private static readonly string[] _dSAXSoulFieldNames = new string[] { "Experience", "ItemId", "Level", "ModelLevel" };
    private static readonly uint[] _dSAXSoulFieldTags = new uint[] { 24, 8, 16, 32 };
    public static DSA_XSoul DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_XSoul DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_XSoul ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_XSoul__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_XSoul, DSA_XSoul.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_XSoul__FieldAccessorTable; }
    }
    
    public const int ItemIdFieldNumber = 1;
    private bool hasItemId;
    private int itemId_;
    public bool HasItemId {
      get { return hasItemId; }
    }
    public int ItemId {
      get { return itemId_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ExperienceFieldNumber = 3;
    private bool hasExperience;
    private int experience_;
    public bool HasExperience {
      get { return hasExperience; }
    }
    public int Experience {
      get { return experience_; }
    }
    
    public const int ModelLevelFieldNumber = 4;
    private bool hasModelLevel;
    private int modelLevel_;
    public bool HasModelLevel {
      get { return hasModelLevel; }
    }
    public int ModelLevel {
      get { return modelLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSAXSoulFieldNames;
      if (hasItemId) {
        output.WriteInt32(1, field_names[1], ItemId);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[2], Level);
      }
      if (hasExperience) {
        output.WriteInt32(3, field_names[0], Experience);
      }
      if (hasModelLevel) {
        output.WriteInt32(4, field_names[3], ModelLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasExperience) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Experience);
        }
        if (hasModelLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ModelLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_XSoul ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_XSoul ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_XSoul ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_XSoul ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_XSoul MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_XSoul prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_XSoul, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_XSoul cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_XSoul result;
      
      private DSA_XSoul PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_XSoul original = result;
          result = new DSA_XSoul();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_XSoul MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_XSoul.Descriptor; }
      }
      
      public override DSA_XSoul DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_XSoul.DefaultInstance; }
      }
      
      public override DSA_XSoul BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_XSoul) {
          return MergeFrom((DSA_XSoul) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_XSoul other) {
        if (other == global::DashFire.DataStore.DSA_XSoul.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemId) {
          ItemId = other.ItemId;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasExperience) {
          Experience = other.Experience;
        }
        if (other.HasModelLevel) {
          ModelLevel = other.ModelLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSAXSoulFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSAXSoulFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemId = input.ReadInt32(ref result.itemId_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasExperience = input.ReadInt32(ref result.experience_);
              break;
            }
            case 32: {
              result.hasModelLevel = input.ReadInt32(ref result.modelLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemId {
        get { return result.hasItemId; }
      }
      public int ItemId {
        get { return result.ItemId; }
        set { SetItemId(value); }
      }
      public Builder SetItemId(int value) {
        PrepareBuilder();
        result.hasItemId = true;
        result.itemId_ = value;
        return this;
      }
      public Builder ClearItemId() {
        PrepareBuilder();
        result.hasItemId = false;
        result.itemId_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasExperience {
        get { return result.hasExperience; }
      }
      public int Experience {
        get { return result.Experience; }
        set { SetExperience(value); }
      }
      public Builder SetExperience(int value) {
        PrepareBuilder();
        result.hasExperience = true;
        result.experience_ = value;
        return this;
      }
      public Builder ClearExperience() {
        PrepareBuilder();
        result.hasExperience = false;
        result.experience_ = 0;
        return this;
      }
      
      public bool HasModelLevel {
        get { return result.hasModelLevel; }
      }
      public int ModelLevel {
        get { return result.ModelLevel; }
        set { SetModelLevel(value); }
      }
      public Builder SetModelLevel(int value) {
        PrepareBuilder();
        result.hasModelLevel = true;
        result.modelLevel_ = value;
        return this;
      }
      public Builder ClearModelLevel() {
        PrepareBuilder();
        result.hasModelLevel = false;
        result.modelLevel_ = 0;
        return this;
      }
    }
    static DSA_XSoul() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_Partner : pb::GeneratedMessage<DSA_Partner, DSA_Partner.Builder> {
    private DSA_Partner() { }
    private static readonly DSA_Partner defaultInstance = new DSA_Partner().MakeReadOnly();
    private static readonly string[] _dSAPartnerFieldNames = new string[] { "AdditionLevel", "PartnerId", "SkillLevel" };
    private static readonly uint[] _dSAPartnerFieldTags = new uint[] { 16, 8, 24 };
    public static DSA_Partner DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_Partner DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_Partner ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Partner__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_Partner, DSA_Partner.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_Partner__FieldAccessorTable; }
    }
    
    public const int PartnerIdFieldNumber = 1;
    private bool hasPartnerId;
    private int partnerId_;
    public bool HasPartnerId {
      get { return hasPartnerId; }
    }
    public int PartnerId {
      get { return partnerId_; }
    }
    
    public const int AdditionLevelFieldNumber = 2;
    private bool hasAdditionLevel;
    private int additionLevel_;
    public bool HasAdditionLevel {
      get { return hasAdditionLevel; }
    }
    public int AdditionLevel {
      get { return additionLevel_; }
    }
    
    public const int SkillLevelFieldNumber = 3;
    private bool hasSkillLevel;
    private int skillLevel_;
    public bool HasSkillLevel {
      get { return hasSkillLevel; }
    }
    public int SkillLevel {
      get { return skillLevel_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPartnerId) return false;
        if (!hasAdditionLevel) return false;
        if (!hasSkillLevel) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSAPartnerFieldNames;
      if (hasPartnerId) {
        output.WriteInt32(1, field_names[1], PartnerId);
      }
      if (hasAdditionLevel) {
        output.WriteInt32(2, field_names[0], AdditionLevel);
      }
      if (hasSkillLevel) {
        output.WriteInt32(3, field_names[2], SkillLevel);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPartnerId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, PartnerId);
        }
        if (hasAdditionLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AdditionLevel);
        }
        if (hasSkillLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SkillLevel);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_Partner ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Partner ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Partner ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_Partner ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_Partner ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Partner ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_Partner ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_Partner ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_Partner ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_Partner ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_Partner MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_Partner prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_Partner, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_Partner cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_Partner result;
      
      private DSA_Partner PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_Partner original = result;
          result = new DSA_Partner();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_Partner MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_Partner.Descriptor; }
      }
      
      public override DSA_Partner DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_Partner.DefaultInstance; }
      }
      
      public override DSA_Partner BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_Partner) {
          return MergeFrom((DSA_Partner) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_Partner other) {
        if (other == global::DashFire.DataStore.DSA_Partner.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPartnerId) {
          PartnerId = other.PartnerId;
        }
        if (other.HasAdditionLevel) {
          AdditionLevel = other.AdditionLevel;
        }
        if (other.HasSkillLevel) {
          SkillLevel = other.SkillLevel;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSAPartnerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSAPartnerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPartnerId = input.ReadInt32(ref result.partnerId_);
              break;
            }
            case 16: {
              result.hasAdditionLevel = input.ReadInt32(ref result.additionLevel_);
              break;
            }
            case 24: {
              result.hasSkillLevel = input.ReadInt32(ref result.skillLevel_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPartnerId {
        get { return result.hasPartnerId; }
      }
      public int PartnerId {
        get { return result.PartnerId; }
        set { SetPartnerId(value); }
      }
      public Builder SetPartnerId(int value) {
        PrepareBuilder();
        result.hasPartnerId = true;
        result.partnerId_ = value;
        return this;
      }
      public Builder ClearPartnerId() {
        PrepareBuilder();
        result.hasPartnerId = false;
        result.partnerId_ = 0;
        return this;
      }
      
      public bool HasAdditionLevel {
        get { return result.hasAdditionLevel; }
      }
      public int AdditionLevel {
        get { return result.AdditionLevel; }
        set { SetAdditionLevel(value); }
      }
      public Builder SetAdditionLevel(int value) {
        PrepareBuilder();
        result.hasAdditionLevel = true;
        result.additionLevel_ = value;
        return this;
      }
      public Builder ClearAdditionLevel() {
        PrepareBuilder();
        result.hasAdditionLevel = false;
        result.additionLevel_ = 0;
        return this;
      }
      
      public bool HasSkillLevel {
        get { return result.hasSkillLevel; }
      }
      public int SkillLevel {
        get { return result.SkillLevel; }
        set { SetSkillLevel(value); }
      }
      public Builder SetSkillLevel(int value) {
        PrepareBuilder();
        result.hasSkillLevel = true;
        result.skillLevel_ = value;
        return this;
      }
      public Builder ClearSkillLevel() {
        PrepareBuilder();
        result.hasSkillLevel = false;
        result.skillLevel_ = 0;
        return this;
      }
    }
    static DSA_Partner() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_ExpeditionImage : pb::GeneratedMessage<DSA_ExpeditionImage, DSA_ExpeditionImage.Builder> {
    private DSA_ExpeditionImage() { }
    private static readonly DSA_ExpeditionImage defaultInstance = new DSA_ExpeditionImage().MakeReadOnly();
    private static readonly string[] _dSAExpeditionImageFieldNames = new string[] { "EquipList", "FightingScore", "Guid", "HeroId", "LegacyList", "Level", "Nickname", "SkillList" };
    private static readonly uint[] _dSAExpeditionImageFieldTags = new uint[] { 50, 40, 8, 16, 66, 32, 26, 58 };
    public static DSA_ExpeditionImage DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_ExpeditionImage DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_ExpeditionImage ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_ExpeditionImage__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_ExpeditionImage, DSA_ExpeditionImage.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_ExpeditionImage__FieldAccessorTable; }
    }
    
    public const int GuidFieldNumber = 1;
    private bool hasGuid;
    private ulong guid_;
    public bool HasGuid {
      get { return hasGuid; }
    }
    public ulong Guid {
      get { return guid_; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private int heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public int HeroId {
      get { return heroId_; }
    }
    
    public const int NicknameFieldNumber = 3;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int LevelFieldNumber = 4;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int FightingScoreFieldNumber = 5;
    private bool hasFightingScore;
    private int fightingScore_;
    public bool HasFightingScore {
      get { return hasFightingScore; }
    }
    public int FightingScore {
      get { return fightingScore_; }
    }
    
    public const int EquipListFieldNumber = 6;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Item> equipList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Item>();
    public scg::IList<global::DashFire.DataStore.DSA_Item> EquipListList {
      get { return equipList_; }
    }
    public int EquipListCount {
      get { return equipList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Item GetEquipList(int index) {
      return equipList_[index];
    }
    
    public const int SkillListFieldNumber = 7;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Skill> skillList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Skill>();
    public scg::IList<global::DashFire.DataStore.DSA_Skill> SkillListList {
      get { return skillList_; }
    }
    public int SkillListCount {
      get { return skillList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Skill GetSkillList(int index) {
      return skillList_[index];
    }
    
    public const int LegacyListFieldNumber = 8;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Legacy> legacyList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Legacy>();
    public scg::IList<global::DashFire.DataStore.DSA_Legacy> LegacyListList {
      get { return legacyList_; }
    }
    public int LegacyListCount {
      get { return legacyList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Legacy GetLegacyList(int index) {
      return legacyList_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSAExpeditionImageFieldNames;
      if (hasGuid) {
        output.WriteUInt64(1, field_names[2], Guid);
      }
      if (hasHeroId) {
        output.WriteInt32(2, field_names[3], HeroId);
      }
      if (hasNickname) {
        output.WriteString(3, field_names[6], Nickname);
      }
      if (hasLevel) {
        output.WriteInt32(4, field_names[5], Level);
      }
      if (hasFightingScore) {
        output.WriteInt32(5, field_names[1], FightingScore);
      }
      if (equipList_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], equipList_);
      }
      if (skillList_.Count > 0) {
        output.WriteMessageArray(7, field_names[7], skillList_);
      }
      if (legacyList_.Count > 0) {
        output.WriteMessageArray(8, field_names[4], legacyList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuid) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Guid);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, HeroId);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Nickname);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Level);
        }
        if (hasFightingScore) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, FightingScore);
        }
        foreach (global::DashFire.DataStore.DSA_Item element in EquipListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::DashFire.DataStore.DSA_Skill element in SkillListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::DashFire.DataStore.DSA_Legacy element in LegacyListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_ExpeditionImage ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_ExpeditionImage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_ExpeditionImage MakeReadOnly() {
      equipList_.MakeReadOnly();
      skillList_.MakeReadOnly();
      legacyList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_ExpeditionImage prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_ExpeditionImage, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_ExpeditionImage cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_ExpeditionImage result;
      
      private DSA_ExpeditionImage PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_ExpeditionImage original = result;
          result = new DSA_ExpeditionImage();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_ExpeditionImage MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_ExpeditionImage.Descriptor; }
      }
      
      public override DSA_ExpeditionImage DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_ExpeditionImage.DefaultInstance; }
      }
      
      public override DSA_ExpeditionImage BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_ExpeditionImage) {
          return MergeFrom((DSA_ExpeditionImage) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_ExpeditionImage other) {
        if (other == global::DashFire.DataStore.DSA_ExpeditionImage.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuid) {
          Guid = other.Guid;
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasFightingScore) {
          FightingScore = other.FightingScore;
        }
        if (other.equipList_.Count != 0) {
          result.equipList_.Add(other.equipList_);
        }
        if (other.skillList_.Count != 0) {
          result.skillList_.Add(other.skillList_);
        }
        if (other.legacyList_.Count != 0) {
          result.legacyList_.Add(other.legacyList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSAExpeditionImageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSAExpeditionImageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuid = input.ReadUInt64(ref result.guid_);
              break;
            }
            case 16: {
              result.hasHeroId = input.ReadInt32(ref result.heroId_);
              break;
            }
            case 26: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 32: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 40: {
              result.hasFightingScore = input.ReadInt32(ref result.fightingScore_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.equipList_, global::DashFire.DataStore.DSA_Item.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.skillList_, global::DashFire.DataStore.DSA_Skill.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.legacyList_, global::DashFire.DataStore.DSA_Legacy.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuid {
        get { return result.hasGuid; }
      }
      public ulong Guid {
        get { return result.Guid; }
        set { SetGuid(value); }
      }
      public Builder SetGuid(ulong value) {
        PrepareBuilder();
        result.hasGuid = true;
        result.guid_ = value;
        return this;
      }
      public Builder ClearGuid() {
        PrepareBuilder();
        result.hasGuid = false;
        result.guid_ = 0UL;
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public int HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(int value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasFightingScore {
        get { return result.hasFightingScore; }
      }
      public int FightingScore {
        get { return result.FightingScore; }
        set { SetFightingScore(value); }
      }
      public Builder SetFightingScore(int value) {
        PrepareBuilder();
        result.hasFightingScore = true;
        result.fightingScore_ = value;
        return this;
      }
      public Builder ClearFightingScore() {
        PrepareBuilder();
        result.hasFightingScore = false;
        result.fightingScore_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Item> EquipListList {
        get { return PrepareBuilder().equipList_; }
      }
      public int EquipListCount {
        get { return result.EquipListCount; }
      }
      public global::DashFire.DataStore.DSA_Item GetEquipList(int index) {
        return result.GetEquipList(index);
      }
      public Builder SetEquipList(int index, global::DashFire.DataStore.DSA_Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equipList_[index] = value;
        return this;
      }
      public Builder SetEquipList(int index, global::DashFire.DataStore.DSA_Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equipList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEquipList(global::DashFire.DataStore.DSA_Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equipList_.Add(value);
        return this;
      }
      public Builder AddEquipList(global::DashFire.DataStore.DSA_Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equipList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEquipList(scg::IEnumerable<global::DashFire.DataStore.DSA_Item> values) {
        PrepareBuilder();
        result.equipList_.Add(values);
        return this;
      }
      public Builder ClearEquipList() {
        PrepareBuilder();
        result.equipList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Skill> SkillListList {
        get { return PrepareBuilder().skillList_; }
      }
      public int SkillListCount {
        get { return result.SkillListCount; }
      }
      public global::DashFire.DataStore.DSA_Skill GetSkillList(int index) {
        return result.GetSkillList(index);
      }
      public Builder SetSkillList(int index, global::DashFire.DataStore.DSA_Skill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillList_[index] = value;
        return this;
      }
      public Builder SetSkillList(int index, global::DashFire.DataStore.DSA_Skill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkillList(global::DashFire.DataStore.DSA_Skill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillList_.Add(value);
        return this;
      }
      public Builder AddSkillList(global::DashFire.DataStore.DSA_Skill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkillList(scg::IEnumerable<global::DashFire.DataStore.DSA_Skill> values) {
        PrepareBuilder();
        result.skillList_.Add(values);
        return this;
      }
      public Builder ClearSkillList() {
        PrepareBuilder();
        result.skillList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Legacy> LegacyListList {
        get { return PrepareBuilder().legacyList_; }
      }
      public int LegacyListCount {
        get { return result.LegacyListCount; }
      }
      public global::DashFire.DataStore.DSA_Legacy GetLegacyList(int index) {
        return result.GetLegacyList(index);
      }
      public Builder SetLegacyList(int index, global::DashFire.DataStore.DSA_Legacy value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legacyList_[index] = value;
        return this;
      }
      public Builder SetLegacyList(int index, global::DashFire.DataStore.DSA_Legacy.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legacyList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLegacyList(global::DashFire.DataStore.DSA_Legacy value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legacyList_.Add(value);
        return this;
      }
      public Builder AddLegacyList(global::DashFire.DataStore.DSA_Legacy.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legacyList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLegacyList(scg::IEnumerable<global::DashFire.DataStore.DSA_Legacy> values) {
        PrepareBuilder();
        result.legacyList_.Add(values);
        return this;
      }
      public Builder ClearLegacyList() {
        PrepareBuilder();
        result.legacyList_.Clear();
        return this;
      }
    }
    static DSA_ExpeditionImage() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DSA_ArenaInfo : pb::GeneratedMessage<DSA_ArenaInfo, DSA_ArenaInfo.Builder> {
    private DSA_ArenaInfo() { }
    private static readonly DSA_ArenaInfo defaultInstance = new DSA_ArenaInfo().MakeReadOnly();
    private static readonly string[] _dSAArenaInfoFieldNames = new string[] { "ActivePartner", "EquipList", "FightingScore", "Guid", "HeroId", "LegacyList", "Level", "Nickname", "PartnerList", "SkillList", "XSoulList" };
    private static readonly uint[] _dSAArenaInfoFieldTags = new uint[] { 90, 50, 40, 8, 16, 66, 32, 26, 82, 58, 74 };
    public static DSA_ArenaInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DSA_ArenaInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DSA_ArenaInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_ArenaInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DSA_ArenaInfo, DSA_ArenaInfo.Builder> InternalFieldAccessors {
      get { return global::DashFire.DataStore.Message.internal__static_DSA_ArenaInfo__FieldAccessorTable; }
    }
    
    public const int GuidFieldNumber = 1;
    private bool hasGuid;
    private ulong guid_;
    public bool HasGuid {
      get { return hasGuid; }
    }
    public ulong Guid {
      get { return guid_; }
    }
    
    public const int HeroIdFieldNumber = 2;
    private bool hasHeroId;
    private int heroId_;
    public bool HasHeroId {
      get { return hasHeroId; }
    }
    public int HeroId {
      get { return heroId_; }
    }
    
    public const int NicknameFieldNumber = 3;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int LevelFieldNumber = 4;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int FightingScoreFieldNumber = 5;
    private bool hasFightingScore;
    private int fightingScore_;
    public bool HasFightingScore {
      get { return hasFightingScore; }
    }
    public int FightingScore {
      get { return fightingScore_; }
    }
    
    public const int EquipListFieldNumber = 6;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Item> equipList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Item>();
    public scg::IList<global::DashFire.DataStore.DSA_Item> EquipListList {
      get { return equipList_; }
    }
    public int EquipListCount {
      get { return equipList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Item GetEquipList(int index) {
      return equipList_[index];
    }
    
    public const int SkillListFieldNumber = 7;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Skill> skillList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Skill>();
    public scg::IList<global::DashFire.DataStore.DSA_Skill> SkillListList {
      get { return skillList_; }
    }
    public int SkillListCount {
      get { return skillList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Skill GetSkillList(int index) {
      return skillList_[index];
    }
    
    public const int LegacyListFieldNumber = 8;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Legacy> legacyList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Legacy>();
    public scg::IList<global::DashFire.DataStore.DSA_Legacy> LegacyListList {
      get { return legacyList_; }
    }
    public int LegacyListCount {
      get { return legacyList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Legacy GetLegacyList(int index) {
      return legacyList_[index];
    }
    
    public const int XSoulListFieldNumber = 9;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_XSoul> xSoulList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_XSoul>();
    public scg::IList<global::DashFire.DataStore.DSA_XSoul> XSoulListList {
      get { return xSoulList_; }
    }
    public int XSoulListCount {
      get { return xSoulList_.Count; }
    }
    public global::DashFire.DataStore.DSA_XSoul GetXSoulList(int index) {
      return xSoulList_[index];
    }
    
    public const int PartnerListFieldNumber = 10;
    private pbc::PopsicleList<global::DashFire.DataStore.DSA_Partner> partnerList_ = new pbc::PopsicleList<global::DashFire.DataStore.DSA_Partner>();
    public scg::IList<global::DashFire.DataStore.DSA_Partner> PartnerListList {
      get { return partnerList_; }
    }
    public int PartnerListCount {
      get { return partnerList_.Count; }
    }
    public global::DashFire.DataStore.DSA_Partner GetPartnerList(int index) {
      return partnerList_[index];
    }
    
    public const int ActivePartnerFieldNumber = 11;
    private bool hasActivePartner;
    private global::DashFire.DataStore.DSA_Partner activePartner_;
    public bool HasActivePartner {
      get { return hasActivePartner; }
    }
    public global::DashFire.DataStore.DSA_Partner ActivePartner {
      get { return activePartner_ ?? global::DashFire.DataStore.DSA_Partner.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::DashFire.DataStore.DSA_Partner element in PartnerListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasActivePartner) {
          if (!ActivePartner.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dSAArenaInfoFieldNames;
      if (hasGuid) {
        output.WriteUInt64(1, field_names[3], Guid);
      }
      if (hasHeroId) {
        output.WriteInt32(2, field_names[4], HeroId);
      }
      if (hasNickname) {
        output.WriteString(3, field_names[7], Nickname);
      }
      if (hasLevel) {
        output.WriteInt32(4, field_names[6], Level);
      }
      if (hasFightingScore) {
        output.WriteInt32(5, field_names[2], FightingScore);
      }
      if (equipList_.Count > 0) {
        output.WriteMessageArray(6, field_names[1], equipList_);
      }
      if (skillList_.Count > 0) {
        output.WriteMessageArray(7, field_names[9], skillList_);
      }
      if (legacyList_.Count > 0) {
        output.WriteMessageArray(8, field_names[5], legacyList_);
      }
      if (xSoulList_.Count > 0) {
        output.WriteMessageArray(9, field_names[10], xSoulList_);
      }
      if (partnerList_.Count > 0) {
        output.WriteMessageArray(10, field_names[8], partnerList_);
      }
      if (hasActivePartner) {
        output.WriteMessage(11, field_names[0], ActivePartner);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasGuid) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, Guid);
        }
        if (hasHeroId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, HeroId);
        }
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Nickname);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Level);
        }
        if (hasFightingScore) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, FightingScore);
        }
        foreach (global::DashFire.DataStore.DSA_Item element in EquipListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::DashFire.DataStore.DSA_Skill element in SkillListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        foreach (global::DashFire.DataStore.DSA_Legacy element in LegacyListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        foreach (global::DashFire.DataStore.DSA_XSoul element in XSoulListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        foreach (global::DashFire.DataStore.DSA_Partner element in PartnerListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        if (hasActivePartner) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ActivePartner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DSA_ArenaInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DSA_ArenaInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DSA_ArenaInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DSA_ArenaInfo MakeReadOnly() {
      equipList_.MakeReadOnly();
      skillList_.MakeReadOnly();
      legacyList_.MakeReadOnly();
      xSoulList_.MakeReadOnly();
      partnerList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DSA_ArenaInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DSA_ArenaInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DSA_ArenaInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DSA_ArenaInfo result;
      
      private DSA_ArenaInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          DSA_ArenaInfo original = result;
          result = new DSA_ArenaInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DSA_ArenaInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::DashFire.DataStore.DSA_ArenaInfo.Descriptor; }
      }
      
      public override DSA_ArenaInfo DefaultInstanceForType {
        get { return global::DashFire.DataStore.DSA_ArenaInfo.DefaultInstance; }
      }
      
      public override DSA_ArenaInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DSA_ArenaInfo) {
          return MergeFrom((DSA_ArenaInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DSA_ArenaInfo other) {
        if (other == global::DashFire.DataStore.DSA_ArenaInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGuid) {
          Guid = other.Guid;
        }
        if (other.HasHeroId) {
          HeroId = other.HeroId;
        }
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasFightingScore) {
          FightingScore = other.FightingScore;
        }
        if (other.equipList_.Count != 0) {
          result.equipList_.Add(other.equipList_);
        }
        if (other.skillList_.Count != 0) {
          result.skillList_.Add(other.skillList_);
        }
        if (other.legacyList_.Count != 0) {
          result.legacyList_.Add(other.legacyList_);
        }
        if (other.xSoulList_.Count != 0) {
          result.xSoulList_.Add(other.xSoulList_);
        }
        if (other.partnerList_.Count != 0) {
          result.partnerList_.Add(other.partnerList_);
        }
        if (other.HasActivePartner) {
          MergeActivePartner(other.ActivePartner);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dSAArenaInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dSAArenaInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGuid = input.ReadUInt64(ref result.guid_);
              break;
            }
            case 16: {
              result.hasHeroId = input.ReadInt32(ref result.heroId_);
              break;
            }
            case 26: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 32: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 40: {
              result.hasFightingScore = input.ReadInt32(ref result.fightingScore_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.equipList_, global::DashFire.DataStore.DSA_Item.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.skillList_, global::DashFire.DataStore.DSA_Skill.DefaultInstance, extensionRegistry);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.legacyList_, global::DashFire.DataStore.DSA_Legacy.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.xSoulList_, global::DashFire.DataStore.DSA_XSoul.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.partnerList_, global::DashFire.DataStore.DSA_Partner.DefaultInstance, extensionRegistry);
              break;
            }
            case 90: {
              global::DashFire.DataStore.DSA_Partner.Builder subBuilder = global::DashFire.DataStore.DSA_Partner.CreateBuilder();
              if (result.hasActivePartner) {
                subBuilder.MergeFrom(ActivePartner);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ActivePartner = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGuid {
        get { return result.hasGuid; }
      }
      public ulong Guid {
        get { return result.Guid; }
        set { SetGuid(value); }
      }
      public Builder SetGuid(ulong value) {
        PrepareBuilder();
        result.hasGuid = true;
        result.guid_ = value;
        return this;
      }
      public Builder ClearGuid() {
        PrepareBuilder();
        result.hasGuid = false;
        result.guid_ = 0UL;
        return this;
      }
      
      public bool HasHeroId {
        get { return result.hasHeroId; }
      }
      public int HeroId {
        get { return result.HeroId; }
        set { SetHeroId(value); }
      }
      public Builder SetHeroId(int value) {
        PrepareBuilder();
        result.hasHeroId = true;
        result.heroId_ = value;
        return this;
      }
      public Builder ClearHeroId() {
        PrepareBuilder();
        result.hasHeroId = false;
        result.heroId_ = 0;
        return this;
      }
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasFightingScore {
        get { return result.hasFightingScore; }
      }
      public int FightingScore {
        get { return result.FightingScore; }
        set { SetFightingScore(value); }
      }
      public Builder SetFightingScore(int value) {
        PrepareBuilder();
        result.hasFightingScore = true;
        result.fightingScore_ = value;
        return this;
      }
      public Builder ClearFightingScore() {
        PrepareBuilder();
        result.hasFightingScore = false;
        result.fightingScore_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Item> EquipListList {
        get { return PrepareBuilder().equipList_; }
      }
      public int EquipListCount {
        get { return result.EquipListCount; }
      }
      public global::DashFire.DataStore.DSA_Item GetEquipList(int index) {
        return result.GetEquipList(index);
      }
      public Builder SetEquipList(int index, global::DashFire.DataStore.DSA_Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equipList_[index] = value;
        return this;
      }
      public Builder SetEquipList(int index, global::DashFire.DataStore.DSA_Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equipList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEquipList(global::DashFire.DataStore.DSA_Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equipList_.Add(value);
        return this;
      }
      public Builder AddEquipList(global::DashFire.DataStore.DSA_Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equipList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEquipList(scg::IEnumerable<global::DashFire.DataStore.DSA_Item> values) {
        PrepareBuilder();
        result.equipList_.Add(values);
        return this;
      }
      public Builder ClearEquipList() {
        PrepareBuilder();
        result.equipList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Skill> SkillListList {
        get { return PrepareBuilder().skillList_; }
      }
      public int SkillListCount {
        get { return result.SkillListCount; }
      }
      public global::DashFire.DataStore.DSA_Skill GetSkillList(int index) {
        return result.GetSkillList(index);
      }
      public Builder SetSkillList(int index, global::DashFire.DataStore.DSA_Skill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillList_[index] = value;
        return this;
      }
      public Builder SetSkillList(int index, global::DashFire.DataStore.DSA_Skill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSkillList(global::DashFire.DataStore.DSA_Skill value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.skillList_.Add(value);
        return this;
      }
      public Builder AddSkillList(global::DashFire.DataStore.DSA_Skill.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.skillList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSkillList(scg::IEnumerable<global::DashFire.DataStore.DSA_Skill> values) {
        PrepareBuilder();
        result.skillList_.Add(values);
        return this;
      }
      public Builder ClearSkillList() {
        PrepareBuilder();
        result.skillList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Legacy> LegacyListList {
        get { return PrepareBuilder().legacyList_; }
      }
      public int LegacyListCount {
        get { return result.LegacyListCount; }
      }
      public global::DashFire.DataStore.DSA_Legacy GetLegacyList(int index) {
        return result.GetLegacyList(index);
      }
      public Builder SetLegacyList(int index, global::DashFire.DataStore.DSA_Legacy value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legacyList_[index] = value;
        return this;
      }
      public Builder SetLegacyList(int index, global::DashFire.DataStore.DSA_Legacy.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legacyList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLegacyList(global::DashFire.DataStore.DSA_Legacy value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.legacyList_.Add(value);
        return this;
      }
      public Builder AddLegacyList(global::DashFire.DataStore.DSA_Legacy.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.legacyList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLegacyList(scg::IEnumerable<global::DashFire.DataStore.DSA_Legacy> values) {
        PrepareBuilder();
        result.legacyList_.Add(values);
        return this;
      }
      public Builder ClearLegacyList() {
        PrepareBuilder();
        result.legacyList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_XSoul> XSoulListList {
        get { return PrepareBuilder().xSoulList_; }
      }
      public int XSoulListCount {
        get { return result.XSoulListCount; }
      }
      public global::DashFire.DataStore.DSA_XSoul GetXSoulList(int index) {
        return result.GetXSoulList(index);
      }
      public Builder SetXSoulList(int index, global::DashFire.DataStore.DSA_XSoul value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.xSoulList_[index] = value;
        return this;
      }
      public Builder SetXSoulList(int index, global::DashFire.DataStore.DSA_XSoul.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.xSoulList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddXSoulList(global::DashFire.DataStore.DSA_XSoul value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.xSoulList_.Add(value);
        return this;
      }
      public Builder AddXSoulList(global::DashFire.DataStore.DSA_XSoul.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.xSoulList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeXSoulList(scg::IEnumerable<global::DashFire.DataStore.DSA_XSoul> values) {
        PrepareBuilder();
        result.xSoulList_.Add(values);
        return this;
      }
      public Builder ClearXSoulList() {
        PrepareBuilder();
        result.xSoulList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::DashFire.DataStore.DSA_Partner> PartnerListList {
        get { return PrepareBuilder().partnerList_; }
      }
      public int PartnerListCount {
        get { return result.PartnerListCount; }
      }
      public global::DashFire.DataStore.DSA_Partner GetPartnerList(int index) {
        return result.GetPartnerList(index);
      }
      public Builder SetPartnerList(int index, global::DashFire.DataStore.DSA_Partner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.partnerList_[index] = value;
        return this;
      }
      public Builder SetPartnerList(int index, global::DashFire.DataStore.DSA_Partner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.partnerList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPartnerList(global::DashFire.DataStore.DSA_Partner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.partnerList_.Add(value);
        return this;
      }
      public Builder AddPartnerList(global::DashFire.DataStore.DSA_Partner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.partnerList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePartnerList(scg::IEnumerable<global::DashFire.DataStore.DSA_Partner> values) {
        PrepareBuilder();
        result.partnerList_.Add(values);
        return this;
      }
      public Builder ClearPartnerList() {
        PrepareBuilder();
        result.partnerList_.Clear();
        return this;
      }
      
      public bool HasActivePartner {
       get { return result.hasActivePartner; }
      }
      public global::DashFire.DataStore.DSA_Partner ActivePartner {
        get { return result.ActivePartner; }
        set { SetActivePartner(value); }
      }
      public Builder SetActivePartner(global::DashFire.DataStore.DSA_Partner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasActivePartner = true;
        result.activePartner_ = value;
        return this;
      }
      public Builder SetActivePartner(global::DashFire.DataStore.DSA_Partner.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasActivePartner = true;
        result.activePartner_ = builderForValue.Build();
        return this;
      }
      public Builder MergeActivePartner(global::DashFire.DataStore.DSA_Partner value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasActivePartner &&
            result.activePartner_ != global::DashFire.DataStore.DSA_Partner.DefaultInstance) {
            result.activePartner_ = global::DashFire.DataStore.DSA_Partner.CreateBuilder(result.activePartner_).MergeFrom(value).BuildPartial();
        } else {
          result.activePartner_ = value;
        }
        result.hasActivePartner = true;
        return this;
      }
      public Builder ClearActivePartner() {
        PrepareBuilder();
        result.hasActivePartner = false;
        result.activePartner_ = null;
        return this;
      }
    }
    static DSA_ArenaInfo() {
      object.ReferenceEquals(global::DashFire.DataStore.Message.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
